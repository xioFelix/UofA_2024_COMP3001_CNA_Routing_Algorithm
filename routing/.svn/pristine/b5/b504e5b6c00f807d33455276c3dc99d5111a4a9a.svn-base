#!/usr/bin/env python3

import sys
import heapq
from collections import defaultdict


class Router:
    def __init__(self, name):
        self.name = name
        self.neighbors = {}
        self.lsdb = defaultdict(lambda: float("inf"))
        self.lsdb[name] = 0  # Set distance to self as 0
        self.routing_table = {}

    def add_neighbor(self, neighbor, cost):
        self.neighbors[neighbor] = cost

    def remove_neighbor(self, neighbor):
        if neighbor in self.neighbors:
            del self.neighbors[neighbor]

    def run_dijkstra(self):
        distances = self.lsdb.copy()
        previous = {router: None for router in distances}
        pq = [(0, self.name)]

        while pq:
            current_distance, current_router = heapq.heappop(pq)
            if current_distance > distances[current_router]:
                continue

            for neighbor, cost in self.lsdb.items():
                if len(neighbor) == 2 and current_router in neighbor:
                    other_router = (
                        neighbor[0] if neighbor[1] == current_router else neighbor[1]
                    )
                    if (
                        other_router in distances
                        and current_distance + cost < distances[other_router]
                    ):
                        distances[other_router] = current_distance + cost
                        previous[other_router] = current_router
                        heapq.heappush(pq, (distances[other_router], other_router))

        self.routing_table = {}
        for router, distance in distances.items():
            if router != self.name and distance != float("inf"):
                next_hop = router
                while previous[next_hop] and previous[next_hop] != self.name:
                    next_hop = previous[next_hop]
                self.routing_table[router] = (next_hop, distance)

    def update_lsdb(self, link_state):
        router1, router2, cost = link_state
        if cost == -1:
            self.lsdb.pop((router1, router2), None)
            self.lsdb.pop((router2, router1), None)
        else:
            self.lsdb[(router1, router2)] = cost
            self.lsdb[(router2, router1)] = cost

    def print_neighbor_table(self):
        print(f"{self.name} Neighbour Table:")
        for neighbor, cost in sorted(self.neighbors.items()):
            print(f"{neighbor}|{cost}")
        print()

    def print_lsdb(self):
        print(f"{self.name} LSDB:")
        for (router1, router2), cost in sorted(
            self.lsdb.items(), key=lambda x: (min(x[0]), max(x[0]))
        ):
            if router1 < router2:
                print(f"{router1}|{router2}|{cost}")
        print()

    def print_routing_table(self):
        print(f"{self.name} Routing Table:")
        for destination, (next_hop, cost) in sorted(self.routing_table.items()):
            print(f"{destination}|{next_hop}|{cost}")
        print()


def parse_input():
    routers = {}

    try:
        # Parse router names until "LINKSTATE"
        while True:
            line = sys.stdin.readline().strip()
            if line == "LINKSTATE":
                break
            if line:
                routers[line] = Router(line)

        # Parse initial link states until "UPDATE"
        while True:
            line = sys.stdin.readline().strip()
            if line == "UPDATE":
                break
            parts = line.split()
            if len(parts) >= 2:
                try:
                    router1, router2 = parts[0].split("-")
                    cost = int(parts[1])
                    selected_routers = parts[2].split(",") if len(parts) > 2 else []

                    # Update neighbor tables for router1 and router2
                    routers[router1].add_neighbor(router2, cost)
                    routers[router2].add_neighbor(router1, cost)

                    # Update LSDB for all routers
                    for router in routers.values():
                        router.update_lsdb((router1, router2, cost))

                    # Run Dijkstra for all routers
                    for router in routers.values():
                        router.run_dijkstra()

                    # Print tables for selected routers, or all routers if no selection
                    for router_name in selected_routers or routers.keys():
                        router = routers.get(router_name)
                        if router:
                            router.print_neighbor_table()
                            router.print_lsdb()
                            router.print_routing_table()
                except (ValueError, IndexError) as e:
                    print(f"Error parsing line '{line}': {e}")
    except Exception as e:
        print(f"Error during input parsing: {e}")

    return routers


def main():
    routers = parse_input()

    # Process link state updates
    try:
        for line in sys.stdin:
            line = line.strip()
            if line == "END":
                break
            parts = line.split()
            if len(parts) >= 3:
                try:
                    router_pair, cost = parts[0], int(parts[1])
                    selected_routers = parts[2].split(",") if len(parts) > 2 else []
                    router1, router2 = router_pair.split("-")

                    # Ensure routers exist
                    if router1 not in routers:
                        routers[router1] = Router(router1)
                    if router2 not in routers:
                        routers[router2] = Router(router2)

                    # Update links and possibly remove or add new ones
                    if cost == -1:
                        routers[router1].remove_neighbor(router2)
                        routers[router2].remove_neighbor(router1)
                        # Remove the link from LSDB for all routers
                        for router in routers.values():
                            router.update_lsdb((router1, router2, cost))
                    else:
                        routers[router1].add_neighbor(router2, cost)
                        routers[router2].add_neighbor(router1, cost)
                        # Update LSDB for all routers
                        for router in routers.values():
                            router.update_lsdb((router1, router2, cost))

                    # Run Dijkstra for all routers
                    for router in routers.values():
                        router.run_dijkstra()

                    # Print tables for selected routers
                    for router_name in selected_routers:
                        router = routers.get(router_name)
                        if router:
                            router.print_neighbor_table()
                            router.print_lsdb()
                            router.print_routing_table()
                except (ValueError, IndexError) as e:
                    print(f"Error parsing line '{line}': {e}")
    except Exception as e:
        print(f"Error during link state updates: {e}")


if __name__ == "__main__":
    main()
